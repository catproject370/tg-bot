import { kv } from '@vercel/kv';
import axios from 'axios';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendTelegramMessage(chatId, text) {
  const url = `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`;
  try {
    await axios.post(url, { chat_id: String(chatId), text: text, parse_mode: 'HTML' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Apps Script
async function saveToSheet(data) {
  try {
    await axios.post(process.env.APPS_SCRIPT_URL, data, {
      headers: { 'Authorization': `Bearer ${process.env.APPS_SCRIPT_SECRET}` }
    });
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Sheets:', error.response ? error.response.data : error.message);
    await sendTelegramMessage(process.env.DEV_CHAT_ID, `üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Sheets: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
export default async function handler(request, response) {
  if (request.method !== 'POST') return response.status(405).send('Method Not Allowed');

  try {
    const update = request.body;
    if (!update?.message?.text) return response.status(200).send('OK');

    const { message } = update;
    const chatId = message.chat.id.toString();
    const text = message.text.trim();

    const stateKey = `state:${chatId}`;
    const nameKey = `name:${chatId}`;
    const currentStatus = await kv.get(stateKey);

    if (text === '/reset') {
      await kv.del(stateKey, nameKey);
      await sendTelegramMessage(chatId, '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
    } 
    else if (text.startsWith('/start')) {
      await kv.del(stateKey, nameKey);
      await sendTelegramMessage(chatId, `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`);
      await kv.set(stateKey, 'waiting_for_name');
    } 
    else if (currentStatus === 'waiting_for_name') {
      await kv.set(nameKey, text);
      await sendTelegramMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
      await kv.set(stateKey, 'waiting_for_email');
    } 
    else if (currentStatus === 'waiting_for_email') {
      const name = await kv.get(nameKey);
      if (!name) {
        await kv.del(stateKey);
        return await sendTelegramMessage(chatId, '–û—à–∏–±–∫–∞, –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
      }
      
      const saved = await saveToSheet([chatId, name, text, new Date().toISOString(), '–Ω–æ–≤—ã–π']);
      if (saved) {
        await sendTelegramMessage(chatId, `–°–ø–∞—Å–∏–±–æ, ${name}! üéØ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.`);
        if (process.env.DEV_CHAT_ID) {
          await sendTelegramMessage(process.env.DEV_CHAT_ID, `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${name}, ${text}`);
        }
      } else {
        await sendTelegramMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.');
      }
      await kv.del(stateKey, nameKey);
    } 
    else {
      await sendTelegramMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
    }
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    if (process.env.DEV_CHAT_ID) {
      await sendTelegramMessage(process.env.DEV_CHAT_ID, `üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  } finally {
    return response.status(200).send('OK');
  }
}