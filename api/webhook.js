import { sql } from '@vercel/postgres';
import axios from 'axios';

// =================================================================
//                 –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =================================================================

async function sendTelegramMessage(chatId, text) {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const botToken = process.env.BOT_TOKEN;
  if (!botToken || !chatId || !text) return;
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  try {
    await axios.post(url, { chat_id: String(chatId), text: text, parse_mode: 'HTML' });
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message); }
}

// --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø ---
async function saveToSheet(data) {
  try {
    const appsScriptUrl = process.env.APPS_SCRIPT_URL;
    const secret = process.env.APPS_SCRIPT_SECRET;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
    const response = await axios.post(appsScriptUrl, data, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${secret}`
      },
      timeout: 10000 // –ñ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏ HTTP —Å—Ç–∞—Ç—É—Å, –∏ –æ—Ç–≤–µ—Ç –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ –≥–æ–≤–æ—Ä—è—Ç –æ–± —É—Å–ø–µ—Ö–µ
    if (response.status === 200 && response.data.status === 'ok') {
      console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets.");
      return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–æ
    } else {
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
      throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Apps Script: ${JSON.stringify(response.data)}`);
    }

  } catch (error) {
    // –¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö Vercel
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets:', error.response ? error.response.data : error.message);
    await sendTelegramMessage(process.env.DEV_CHAT_ID, `üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: ${error.message}`);
    return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—É–¥–∞—á—É
  }
}


// =================================================================
//                 –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö WEBHOOK
// =================================================================
export default async function handler(request, response) {
  // –≠—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (request.method !== 'POST') return response.status(405).send('Method Not Allowed');
  try {
    const update = request.body;
    if (!update?.message?.text) return response.status(200).send('OK');
    const { message } = update;
    const chatId = message.chat.id.toString();
    const text = message.text.trim();
    const { rows } = await sql`SELECT state, user_name FROM user_states WHERE chat_id = ${chatId};`;
    const userState = rows[0];
    const currentStatus = userState?.state;

    if (text === '/reset') {
      await sql`DELETE FROM user_states WHERE chat_id = ${chatId};`;
      await sendTelegramMessage(chatId, '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
    } 
    else if (text.startsWith('/start')) {
      await sql`INSERT INTO user_states (chat_id, state) VALUES (${chatId}, 'waiting_for_name') ON CONFLICT (chat_id) DO UPDATE SET state = 'waiting_for_name', user_name = NULL;`;
      await sendTelegramMessage(chatId, `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`);
    } 
    else if (currentStatus === 'waiting_for_name') {
      await sql`UPDATE user_states SET user_name = ${text}, state = 'waiting_for_email' WHERE chat_id = ${chatId};`;
      await sendTelegramMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
    } 
    else if (currentStatus === 'waiting_for_email') {
      const name = userState?.user_name;
      if (!name) {
        await sql`DELETE FROM user_states WHERE chat_id = ${chatId};`;
        return await sendTelegramMessage(chatId, '–û—à–∏–±–∫–∞, –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å /start');
      }
      const saved = await saveToSheet([chatId, name, text, new Date().toISOString(), '–Ω–æ–≤—ã–π']);
      if (saved) {
        await sendTelegramMessage(chatId, `–°–ø–∞—Å–∏–±–æ, ${name}! üéØ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.`);
        if (process.env.DEV_CHAT_ID) {
          await sendTelegramMessage(process.env.DEV_CHAT_ID, `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${name}, ${text}`);
        }
      } else {
        await sendTelegramMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      await sql`DELETE FROM user_states WHERE chat_id = ${chatId};`;
    } 
    else {
      await sendTelegramMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
    }
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    if (process.env.DEV_CHAT_ID) {
      await sendTelegramMessage(process.env.DEV_CHAT_ID, `üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  } finally {
    return response.status(200).send('OK');
  }
}